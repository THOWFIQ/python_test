import os
import sys
import json
import oracledb
from cryptography.fernet import Fernet

# === Step 1: Sample Data ===
data = {
    "template_id": "1753037518324",
    "userdata": {
        "userName": "Abdurrahaman",
        "userEmail": "Abdurrahaman.Shaik@dellteam.com"
    },
    "region": "EMEA",
    "format_type": "grid",
    "filters": {
        "salesorderid": "asdffas452"
    },
    "isActive": True,
    "columns": [
        {
            "checked": True,
            "group": "Address",
            "isPrimary": False,
            "sortBy": "ascending",
            "value": "Postal Code"
        },
        {
            "checked": True,
            "group": "Other",
            "isPrimary": False,
            "sortBy": "ascending",
            "value": "Customer Num"
        }
    ],
    "templatename": "Default Template",
    "workorderid": "123456",
    "shared": True,
    "sharedUserName": "Abdur"
}

# === Step 2: Decrypt Oracle Credentials ===
config_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'config', 'config_ge4.json'))
with open(config_path) as f:
    config = json.load(f)
    encrypted_username = config['username'].encode()
    encrypted_password = config['password'].encode()
    tns = config['tns']
    key = config['key']

    cipher_suite = Fernet(key)
    decrypted_username = cipher_suite.decrypt(encrypted_username).decode()
    decrypted_password = cipher_suite.decrypt(encrypted_password).decode()

print("Decrypted credentials successfully.")

# === Step 3: Connect to Oracle ===
connection = oracledb.connect(user=decrypted_username, password=decrypted_password, dsn=tns)
cursor = connection.cursor()

# === Step 4: Drop Table if exists ===
table_name = "TEMPLATE_DATA"
try:
    cursor.execute(f"DROP TABLE {table_name} CASCADE CONSTRAINTS")
    print(f"Dropped existing table {table_name}")
except oracledb.DatabaseError:
    print(f"Table {table_name} did not exist or couldn't be dropped. Continuing...")

# === Step 5: Create Table ===
create_table_sql = f"""
CREATE TABLE {table_name} (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    TEMPLATE_ID VARCHAR2(100),
    USERDATA CLOB,
    REGION VARCHAR2(50),
    FORMAT_TYPE VARCHAR2(50),    
    FILTERS CLOB,
    TEMPLATENAME VARCHAR2(100),
    WORKORDERID VARCHAR2(100),
    SHARED NUMBER(1),
    SHAREDUSERNAME VARCHAR2(100),
    COLUMNS CLOB,
    CREATED_AT DATE DEFAULT SYSDATE
)
"""
cursor.execute(create_table_sql)
print(f"Created table {table_name}")

# === Step 6: Insert Data ===
insert_sql = f"""
INSERT INTO {table_name} (
    TEMPLATE_ID, USERDATA, REGION, FORMAT_TYPE,  
    FILTERS, TEMPLATENAME, WORKORDERID, SHARED,
    SHAREDUSERNAME, COLUMNS
) VALUES (
    :template_id, :userdata, :region, :format_type,
    :filters, :templatename, :workorderid, :shared,
    :sharedUserName, :columns
)
"""

bind_data = {
    "template_id": data["template_id"],
    "userdata": json.dumps(data["userdata"]),
    "region": data["region"],
    "format_type": data["format_type"],
    "filters": json.dumps(data["filters"]),
    "templatename": data["templatename"],
    "workorderid": data["workorderid"],
    "shared": 1 if data["shared"] else 0,
    "sharedUserName": data["sharedUserName"],
    "columns": json.dumps(data["columns"])
}

cursor.execute(insert_sql, bind_data)
connection.commit()
print("Data inserted successfully.")

# === Step 7: Cleanup ===
cursor.close()
connection.close()
